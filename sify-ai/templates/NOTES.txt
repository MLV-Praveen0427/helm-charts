1. Get the application URLs by running these commands:

{{- if and .Values.frontend.enabled .Values.frontend.ingress.enabled }}
Frontend Ingress:
{{- range $host := .Values.frontend.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.frontend.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.frontend.service.type }}
Frontend NodePort:
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "sify-ai.fullname" . }}-frontend-service)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.frontend.service.type }}
Frontend LoadBalancer:
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
     You can watch the status by running:
     kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "sify-ai.fullname" . }}-frontend-service
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "sify-ai.fullname" . }}-frontend-service --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.frontend.service.port }}
{{- else if contains "ClusterIP" .Values.frontend.service.type }}
Frontend ClusterIP (using port-forward):
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app=frontend" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your frontend"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

{{- if and .Values.backend.enabled .Values.backend.ingress.enabled }}
Backend Ingress:
{{- range $host := .Values.backend.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.backend.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.backend.service.type }}
Backend NodePort:
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "sify-ai.fullname" . }}-backend-service)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.backend.service.type }}
Backend LoadBalancer:
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
     You can watch the status by running:
     kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "sify-ai.fullname" . }}-backend-service
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "sify-ai.fullname" . }}-backend-service --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.backend.service.port }}
{{- else if contains "ClusterIP" .Values.backend.service.type }}
Backend ClusterIP (using port-forward):
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app=backend" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your backend"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

{{- if eq .Values.kserve true }}
KServe installed. You can check inference services using:
kubectl get inferenceservices -n <your-namespace>
{{- end }}

{{- if and .Values.mongodb.enabled }}
MongoDB service deployed via Bitnami chart. Access via:
kubectl get svc {{ .Values.mongodb.releaseName | default "my-mongodb" }} -o wide
{{- end }}

Kubeflow overlays applied using Kustomize.

